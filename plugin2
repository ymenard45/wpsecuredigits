<?php
/*
Plugin Name: MY Secured Digits
Plugin URI: https://sitewebprodesign.fr/plugins
Description: Un plugin d'authentification à deux facteurs pour WordPress en utilisant Google Authenticator
Version: 2.0
Author: Y.MENARD
Author URI: https://sitewebprodesign.fr
License: GPLv2 or later
Text Domain: mon-google-authentificator
*/

if (!defined('ABSPATH')) {
    exit; // Empêcher l'accès direct au fichier
}

function my_secure_login_load_textdomain() {
    load_plugin_textdomain('my_secure_login', false, basename(dirname(__FILE__)) . '/languages');
}
add_action('plugins_loaded', 'my_secure_login_load_textdomain');

require_once plugin_dir_path(__FILE__) . 'lib/my_secure_login.php';

require_once 'vendor/autoload.php';
$google2fa = new PHPGangsta_GoogleAuthenticator();
$secret = $google2fa->createSecret();

 
add_action('admin_menu', 'wpsecuredigits_add_settings_link');

// traduction des messages dans les fichiers enfants
function my_google_authenticator_enqueue_admin_scripts($hook) {
    if ('settings_page_my_secure_login_settings' !== $hook) {
        return;
    }

    wp_enqueue_script('my_secure_login-admin', plugins_url('admin/js/my_secure_login_admin.js', __FILE__), array('jquery'), '1.0.0', true);

    $translation_array = array(
        'reset_confirm_message' => __('Voulez-vous vraiment réinitialiser tous les paramètres de my_secure_login ?', 'my-google-authenticator'),
    );

    wp_localize_script('my-google-authenticator-admin', 'my_google_authenticator_i18n', $translation_array);
}
add_action('admin_enqueue_scripts', 'my_secure_login_admin_css');

add_filter('xmlrpc_enabled', '__return_false');

add_action('admin_menu', 'my_secure_login_menu');
add_action('admin_init', 'my_secure_login_settings_init');

function my_secure_login_menu() {
    add_options_page(__('My Secure Login Settings', 'my_secure_login'), __('My Secure Login', 'my_secure_login'), 'manage_options', 'my_secure_login_options', 'my_secure_login_options_page');
    add_dashboard_page(__('My Secure Login Dashboard', 'my_secure_login'), __('My Secure Login Dashboard', 'my_secure_login'), 'manage_options', 'my_secure_login_dashboard', 'my_secure_login_dashboard_page');
}

function my_secure_login_settings_init() {
    // General Settings
    register_setting('my_secure_login_options', 'my_secure_login_options', 'my_secure_login_options_validate');
    add_settings_section('my_secure_login_general_settings', __('General Settings', 'my_secure_login'), 'my_secure_login_general_settings_section_callback', 'my_secure_login_options');

    // Enable plugin functionality
    add_settings_field('my_secure_login_enabled', __('Enable My Secure Login', 'my_secure_login'), 'my_secure_login_enabled_render', 'my_secure_login_options', 'my_secure_login_general_settings');
    
    // Customization Settings
    add_settings_section('my_secure_login_customization_settings', __('Customization Settings', 'my_secure_login'), 'my_secure_login_customization_settings_section_callback', 'my_secure_login_options');
    
    // Custom logo URL
    add_settings_field('my_secure_login_custom_logo_url', __('Custom Logo URL', 'my_secure_login'), 'my_secure_login_custom_logo_url_render', 'my_secure_login_options', 'my_secure_login_customization_settings');
    
    // Spacing
    add_settings_field('my_secure_login_spacing', __('Spacing', 'my_secure_login'), 'my_secure_login_spacing_render', 'my_secure_login_options', 'my_secure_login_customization_settings');
	
	    // Whitelist IPs
    add_settings_field('my_secure_login_whitelist_ips', __('Whitelist IPs', 'my_secure_login'), 'my_secure_login_whitelist_ips_render', 'my_secure_login_options', 'my_secure_login_advanced_settings');
    
    // Blacklist IPs
    add_settings_field('my_secure_login_blacklist_ips', __('Blacklist IPs', 'my_secure_login'), 'my_secure_login_blacklist_ips_render', 'my_secure_login_options', 'my_secure_login_advanced_settings');
    
    // Register settings
    register_setting('my_secure_login_options', 'my_secure_login_options', 'my_secure_login_options_validate');
}

function my_secure_login_enable_render() {
    $options = get_option('my_secure_login_options');
    ?>
    <input type='checkbox' name='my_secure_login_options[enable]' <?php checked($options['enable'], 1); ?> value='1'>
    <?php
}

function my_secure_login_role_render() {
    $options = get_option('my_secure_login_options');
    $selected = isset($options['role']) ? $options['role'] : '';

    <select name='my_secure_login_options[role]'>
        <?php
        $roles = array(
            'administrator' => __('Administrator', 'my-secure-login'),
            'editor' => __('Editor', 'my-secure-login'),
            'author' => __('Author', 'my-secure-login'),
            'contributor' => __('Contributor', 'my-secure-login'),
            'subscriber' => __('Subscriber', 'my-secure-login'),
        );

        foreach ($roles as $role_value => $role_name) {
            echo "<option value='" . esc_attr($role_value) . "'" . selected($options['role'], $role_value, false) . ">" . esc_html($role_name) . "</option>";
        }
        ?>
    </select>
<?php
}

function my_secure_login_user_caps_render() {
    $options = get_option('my_secure_login_options');

    $capabilities = array(
        'activate_plugins',
        'edit_dashboard',
        'manage_categories',
        'manage_links',
        'moderate_comments',
        'manage_options',
        'publish_pages',
        'publish_posts',
        'read_private_pages',
        'read_private_posts',
    );

    foreach ($capabilities as $capability) {
        if (current_user_can($capability)) {
            $first_valid_capability = $capability;
            break;
        }
    }

    if (current_user_can('edit_dashboard')) {
        $user = wp_get_current_user();
        if (isset($user->my_secure_login_activated) && $user->my_secure_login_activated) {
            $url = wp_nonce_url(admin_url('index.php?my_secure_login_disable=1'), 'disable_my_secure_login_for_user', 'nonce');
            echo '<div class="updated"><p>' . sprintf(__('My Secure Login is activated for your account. <a href="%s">Disable it</a>.'), $url) . '</p></div>';
        } else {
            echo '<div class="updated"><p>' . __('My Secure Login is not activated for your account. You can activate it in your profile page.') . '</p></div>';
        }
    }
}
add_action('admin_notices', 'my_secure_login_admin_notice');

function my_secure_login_admin_footer_text($text)
{
    if (current_user_can('activate_plugins') && !get_user_option('my_secure_login_disabled_by_user')) {
        $text .= ' | ' . sprintf(__('My Secure Login is <a href="%s">enabled</a>'), admin_url('profile.php#my_google_authenticator'));
    } else {
        $text .= ' | ' . sprintf(__('My Secure Login is <a href="%s">disabled</a>'), admin_url('profile.php#my_google_authenticator'));
    }

    return $text;
}
add_filter('admin_footer_text', 'my_secure_login_admin_footer_text');

function my_secure_login_plugin_action_links($links, $file)
{
    $plugin = plugin_basename(__FILE__);

    if ($file == $plugin) {
        $links[] = '<a href="options-general.php?page=my_secure_login_options">' . __('Settings') . '</a>';
        $links[] = '<a href="https://wordpress.org/support/plugin/my-secure-login">' . __('Support') . '</a>';
    }

    return $links;
}
add_filter('plugin_action_links', 'my_secure_login_plugin_action_links', 10, 2);

function my_secure_login_init()
{
    load_plugin_textdomain('my-secure-login', false, dirname(plugin_basename(__FILE__)) . '/languages/');

    if (is_multisite() && is_plugin_active_for_network(plugin_basename(__FILE__))) {
        add_action('network_admin_menu', 'my_secure_login_admin_menu');
    } else {
        add_action('admin_menu', 'my_secure_login_admin_menu');
    }
}

function my_secure_login_admin_menu()
{
    add_options_page(__('My Secure Login Settings', 'my-secure-login'), __('My Secure Login', 'my-secure-login'), 'manage_options', 'my_secure_login_options', 'my_secure_login_options_page');
    add_dashboard_page(__('My Secure Login Dashboard', 'my-secure-login'), __('My Secure Login Dashboard', 'my-secure-login'), 'manage_options', 'my_secure_login_dashboard', 'my_secure_login_dashboard_page');
}

function my_secure_login_options_page()
{
    ?>
    <div class="wrap">
        <h2><?php _e('My Secure Login Settings', 'my-secure-login'); ?></h2>
        <form action="options.php" method="post">
            <?php settings_fields('my_secure_login_options'); ?>
            <?php do_settings_sections('my_secure_login_options'); ?>
            <p class="submit">
                <?php submit_button(); ?>
            </p>
        </form>
    </div>
    <?php
}

function my_secure_login_settings_init()
{
    register_setting('my_secure_login_options', 'my_secure_login_options', 'my_secure_login_options_validate');
    add_settings_section('my_secure_login_general_settings', __('General Settings', 'my_secure_login'), 'my_secure_login_general_settings_section_callback', 'my_secure_login_options');
    add_settings_field('my_secure_login_secret_key', __('Secret Key', 'my_secure_login'), 'my_secure_login_secret_key_render', 'my_secure_login_options', 'my_secure_login_general_settings');
    add_settings_field('my_secure_login_digits', __('Digits', 'my_secure_login'), 'my_secure_login_digits_render', 'my_secure_login_options', 'my_secure_login_general_settings');
    add_settings_field('my_secure_login_time', __('Time Step', 'my_secure_login'), 'my_secure_login_time_render', 'my_secure_login_options', 'my_secure_login_general_settings');
    add_settings_section('my_secure_login_customization_settings', __('Customization Settings', 'my_secure_login'), 'my_secure_login_customization_settings_section_callback', 'my_secure_login_options');
    add_settings_field('my_secure_login_margins', __('Margins', 'my_secure_login'), 'my_secure_login_margins_render', 'my_secure_login_options', 'my_secure_login_customization_settings');
    add_settings_field('my_secure_login_spacing', __('Spacing', 'my_secure_login'), 'my_secure_login_spacing_render', 'my_secure_login_options', 'my_secure_login_customization_settings');
    add_settings_field('my_secure_login_padding', __('Padding', 'my_secure_login'), 'my_secure_login_padding_render', 'my_secure_login_options', 'my_secure_login_customization_settings');
    add_settings_section('my_secure_login_advanced_settings', __('Advanced Settings', 'my_secure_login'), 'my_secure_login_advanced_settings_section_callback', 'my_secure_login_options');
    add_settings_field('my_secure_login_login_attempts', __('Login Attempts', 'my_secure_login'), 'my_secure_login_login_attempts_render', 'my_secure_login_options', 'my_secure_login_advanced_settings');
    add_settings_field('my_secure_login_lockout_time', __('Lockout Time (minutes)', 'my_secure_login'), 'my_secure_login_lockout_time_render', 'my_secure_login_options', 'my_secure_login_advanced_settings');
    add_settings_field('my_secure_login_unlock_request', __('Unlock Request', 'my_secure_login'), 'my_secure_login_unlock_request_render', 'my_secure_login_options', 'my_secure_login_advanced_settings');
    add_settings_field('my_secure_login_whitelisted_ips', __('Whitelisted IPs', 'my_secure_login'), 'my_secure_login_whitelisted_ips_render', 'my_secure_login_options', 'my_secure_login_advanced_settings');
    register_setting('my_secure_login_options', 'my_secure_login_options', 'my_secure_login_options_validate');

}

function my_secure_login_options_validate($input) {
    $output = array();

    $output['enable'] = isset($input['enable']) ? '1' : '0';
    $output['text_color'] = sanitize_text_field($input['text_color']);
    $output['bg_color'] = sanitize_text_field($input['bg_color']);
    $output['border_color'] = sanitize_text_field($input['border_color']);
    $output['margins'] = sanitize_text_field($input['margins']);
    $output['spacing'] = sanitize_text_field($input['spacing']);
    $output['padding'] = sanitize_text_field($input['padding']);
    $output['login_attempts'] = absint($input['login_attempts']);
    $output['lockout_time'] = absint($input['lockout_time']);
    $output['unlock_request'] = isset($input['unlock_request']) ? '1' : '0';
    $output['whitelisted_ips'] = sanitize_textarea_field($input['whitelisted_ips']);

    return $output;
}

function my_secure_login_general_settings_section_callback() {
    echo __('General settings for My Secure Login plugin.', 'my_secure_login');
}

function my_secure_login_customization_settings_section_callback() {
    echo __('Customize the appearance of the login form.', 'my_secure_login');
}

function my_secure_login_advanced_settings_section_callback() {
    echo __('Advanced settings for My Secure Login plugin.', 'my_secure_login');
}

function my_secure_login_enable_render() {
    $options = get_option('my_secure_login_options');
    ?>
    <input type='checkbox' name='my_secure_login_options[enable]' <?php checked($options['enable'], 1); ?> value='1'>
    <?php
}

function my_secure_login_text_color_render() {
    $options = get_option('my_secure_login_options');
    ?>
    <input type='text' name='my_secure_login_options[text_color]' value='<?php echo $options['text_color']; ?>'>
    <?php
}

function my_secure_login_bg_color_render() {
    $options = get_option('my_secure_login_options');
    ?>
    <input type='text' name='my_secure_login_options[bg_color]' value='<?php echo $options['bg_color']; ?>'>
    <?php
}

function my_secure_login_border_color_render() {
    $options = get_option('my_secure_login_options');
    ?>
    <input type='text' name='my_secure_login_options[border_color]' value='<?php echo $options['border_color']; ?>'>
    <?php
}

function my_secure_login_margins_render() {
    $options = get_option('my_secure_login_options');
    ?>
    <input type='text' name='my_secure_login_options[margins]' value='<?php echo $options['margins']; ?>'>
    <?php
}

function my_secure_login_spacing_render() {
    $options = get_option('my_secure_login_options');
    ?>
    <input type='text' name='my_secure_login_options[spacing]' value='<?php echo $options['spacing']; ?>'>
    <?php
}

function my_secure_login_failed_attempts_render() {
    $options = get_option('my_secure_login_options');
    ?>
    <input type='text' name='my_secure_login_options[failed_attempts]' value='<?php echo $options['failed_attempts']; ?>'>
    <?php
}

function my_secure_login_lockout_duration_render() {
    $options = get_option('my_secure_login_options');
    ?>
    <input type='text' name='my_secure_login_options[lockout_duration]' value='<?php echo $options['lockout_duration']; ?>'>
    <?php
}

function my_secure_login_options_page() {
    ?>
    <form action='options.php' method='post'>

        <h2>My Secure Login</h2>

        <?php
        settings_fields('my_secure_login_options');
        do_settings_sections('my_secure_login_options');
        submit_button();
        ?>

    </form>
    <?php
}

function my_secure_login_options_validate($input) {
    $output = array();

    foreach ($input as $key => $value) {
        if (isset($input[$key])) {
            $output[$key] = strip_tags(stripslashes($input[$key]));
        }
    }

    return apply_filters('my_secure_login_options_validate', $output, $input);
}

add_action('admin_init', 'my_secure_login_settings_init');
add_action('admin_menu', 'my_secure_login_options_menu');

function my_secure_login_login_failed($username) {
    $options = get_option('my_secure_login_options');
    $ip = $_SERVER['REMOTE_ADDR'];
    $failed_attempts = my_secure_login_get_failed_attempts($ip);

    if ($failed_attempts >= $options['failed_attempts']) {
        my_secure_login_lock_ip($ip);
    } else {
        my_secure_login_increment_failed_attempts($ip);
    }
}

function my_secure_login_login_success($username, $user) {
    $ip = $_SERVER['REMOTE_ADDR'];
    my_secure_login_reset_failed_attempts($ip);
}

function my_secure_login_lockout_check($user) {
    $ip = $_SERVER['REMOTE_ADDR'];
    $locked = my_secure_login_is_ip_locked($ip);

    if ($locked) {
        $user = new WP_Error('denied', __("Your IP has been locked due to too many failed login attempts.", 'my_secure_login'));
    }

    return $user;
}

add_filter('authenticate', 'my_secure_login_lockout_check', 30, 1);
add_action('wp_login_failed', 'my_secure_login_login_failed');
add_action('wp_login', 'my_secure_login_login_success', 10, 2);
