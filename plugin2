<?php
/*
Plugin Name: Mon Google Authentificator
Plugin URI: https://sitewebprodesign.fr/plugins
Description: Un plugin d'authentification à deux facteurs pour WordPress en utilisant Google Authenticator
Version: 2.0
Author: Y.MENARD
Author URI: https://sitewebprodesign.fr
License: GPLv2 or later
Text Domain: mon-google-authentificator
*/

if (!defined('ABSPATH')) {
    exit; // Empêcher l'accès direct au fichier
}

function mon_google_authenticator_load_textdomain() {
    load_plugin_textdomain('mon-google-authenticator', false, basename(dirname(__FILE__)) . '/languages');
}
add_action('plugins_loaded', 'mon_google_authenticator_load_textdomain');

require_once plugin_dir_path(__FILE__) . 'lib/Google-Authentificator.php';

require_once 'vendor/autoload.php';
$google2fa = new PHPGangsta_GoogleAuthenticator();
$secret = $google2fa->createSecret();


// traduction des messages dans les fichiers enfants
function my_google_authenticator_enqueue_admin_scripts($hook) {
    if ('settings_page_my_google_authenticator_settings' !== $hook) {
        return;
    }

    wp_enqueue_script('my-google-authenticator-admin', plugins_url('admin/js/my-google-authenticator-admin.js', __FILE__), array('jquery'), '1.0.0', true);

    $translation_array = array(
        'reset_confirm_message' => __('Voulez-vous vraiment réinitialiser tous les paramètres de My Google Authenticator ?', 'my-google-authenticator'),
    );

    wp_localize_script('my-google-authenticator-admin', 'my_google_authenticator_i18n', $translation_array);
}
add_action('admin_enqueue_scripts', 'my_google_authenticator_enqueue_admin_scripts');

add_filter('xmlrpc_enabled', '__return_false');


// Vos chaînes de texte originales
$menu_title = __('Mon Google Authenticator', 'mon-google-authenticator');
$section_title = __('Paramètres de Mon Google Authenticator', 'mon-google-authenticator');
$logo_url_label = __('URL du logo personnalisé', 'mon-google-authenticator');
$user_types_label = __('Forcer 2FA pour ces Types d\'utilisateurs', 'mon-google-authenticator');

// Anonymisation des messages d'erreur
Function my_google_authenticator_anonymize_error_messages($error_message, $locale = 'en') {
    switch ($locale) {
        case 'fr_FR':
            if (strpos($error_message, __('L\'identifiant', 'mon-google-authenticator')) !== false || strpos($error_message, __('adresse e-mail', 'mon-google-authenticator')) !== false || strpos($error_message, __('mot de passe', 'mon-google-authenticator')) !== false) {
                return __('Les informations d\'identification fournies sont incorrectes. Veuillez réessayer.', 'mon-google-authenticator');
            }
            break;
		case 'es_ES':
            if (strpos($error_message, __('Nombre de usuario', 'mon-google-authenticator')) !== false || strpos($error_message, __('correo electrónico', 'mon-google-authenticator')) !== false || strpos($error_message, __('contraseña', 'mon-google-authenticator')) !== false) {
                return __('Las credenciales proporcionadas son incorrectas. Por favor, inténtalo de nuevo.', 'mon-google-authenticator');
            }
            break;	
       case 'zh_CN':
            // Mandarin translation
                if (strpos($error_message, __('L\'identifiant', 'mon-google-authenticator')) !== false || strpos($error_message, __('adresse e-mail', 'mon-google-authenticator')) !== false || strpos($error_message, __('mot de passe', 'mon-google-authenticator')) !== false) {
                return __('提供的凭据信息错误。请重试。', 'mon-google-authenticator');
				}
            break;
        case 'ru_RU':
            // Russian translation
               if (strpos($error_message, __('L\'identifiant', 'mon-google-authenticator')) !== false || strpos($error_message, __('adresse e-mail', 'mon-google-authenticator')) !== false || strpos($error_message, __('mot de passe', 'mon-google-authenticator')) !== false) {
                return __(' Указанные учетные данные неверны. Пожалуйста, попробуйте еще раз.', 'mon-google-authenticator');
			   }
			break;
        case 'it_IT':
            // Italian translation
               if (strpos($error_message, __('L\'identifiant', 'mon-google-authenticator')) !== false || strpos($error_message, __('adresse e-mail', 'mon-google-authenticator')) !== false || strpos($error_message, __('mot de passe', 'mon-google-authenticator')) !== false) {
                return __(' Le credenziali fornite non sono corrette. Si prega di riprovare.', 'mon-google-authenticator');
			   }
			break;
        case 'de_DE':
            // German translation
               if (strpos($error_message, __('L\'identifiant', 'mon-google-authenticator')) !== false || strpos($error_message, __('adresse e-mail', 'mon-google-authenticator')) !== false || strpos($error_message, __('mot de passe', 'mon-google-authenticator')) !== false) {
                return __('Die angegebenen Anmeldeinformationen sind falsch. Bitte versuchen Sie es erneut.', 'mon-google-authenticator');
			   }
			break;
        case 'pt_PT':
            // Portuguese translation
               if (strpos($error_message, __('L\'identifiant', 'mon-google-authenticator')) !== false || strpos($error_message, __('adresse e-mail', 'mon-google-authenticator')) !== false || strpos($error_message, __('mot de passe', 'mon-google-authenticator')) !== false) {
                return __('As credenciais fornecidas estão incorretas. Por favor, tente novamente.', 'mon-google-authenticator');
			   }
			break;
        case 'hi_IN':
            // Hindi translation
               if (strpos($error_message, __('L\'identifiant', 'mon-google-authenticator')) !== false || strpos($error_message, __('adresse e-mail', 'mon-google-authenticator')) !== false || strpos($error_message, __('mot de passe', 'mon-google-authenticator')) !== false) {
                return __('प्रदान की गई प्रमाणीकरण जानकारी गलत है। कृपया पुनः प्रयास करें।', 'mon-google-authenticator');
			   }
			break;
        case 'bn_BD':
            // Bengali translation
               if (strpos($error_message, __('L\'identifiant', 'mon-google-authenticator')) !== false || strpos($error_message, __('adresse e-mail', 'mon-google-authenticator')) !== false || strpos($error_message, __('mot de passe', 'mon-google-authenticator')) !== false) {
                return __(' প্রদানকৃত প্রমাণদানের তথ্য ভুল। দয়া করে আবার চেষ্টা করুন।', 'mon-google-authenticator');
			   }
			break;
        case 'id_ID':
            // Indonesian translation
               if (strpos($error_message, __('L\'identifiant', 'mon-google-authenticator')) !== false || strpos($error_message, __('adresse e-mail', 'mon-google-authenticator')) !== false || strpos($error_message, __('mot de passe', 'mon-google-authenticator')) !== false) {
                return __('Informasi kredensial yang diberikan salah. Silakan coba lagi', 'mon-google-authenticator');
			   }
			break;
        
		default:
            // English translation
             if (strpos($error_message, __('Username', 'mon-google-authenticator')) !== false || strpos($error_message, __('email', 'mon-google-authenticator')) !== false || strpos($error_message, __('password', 'mon-google-authenticator')) !== false) {
                return __('The provided credentials are incorrect. Please try again.', 'mon-google-authenticator');
            }
            break;

			
			
			
    }
    return $error_message;
}

add_filter('login_errors', function($error_message) {
	
    // Get the current locale
    $locale = get_locale();

    // Call the function with the current locale
    return my_google_authenticator_anonymize_error_messages($error_message, $locale);
});
add_filter('login_errors', 'my_google_authenticator_anonymize_error_messages');



function my_google_authenticator_generate_secret() {
    $ga = new PHPGangsta_GoogleAuthenticator();
    return $ga->createSecret();
}

function my_google_authenticator_generate_qr_code_url($email, $secret) {
    $ga = new PHPGangsta_GoogleAuthenticator();
    return $ga->getQRCodeGoogleUrl($email, $secret);
}

function my_google_authenticator_profile_fields($user) {
    if (!current_user_can('edit_user', $user->ID)) {
        return;
    }

    $google_authenticator_enabled = get_user_meta($user->ID, 'google_authenticator_enabled', true);
    $google_authenticator_secret = get_user_meta($user->ID, 'google_authenticator_secret', true);

    // Générer un nouveau secret s'il n'existe pas encore
    if (empty($google_authenticator_secret)) {
        $google_authenticator_secret = my_google_authenticator_generate_secret();
        update_user_meta($user->ID, 'google_authenticator_secret', $google_authenticator_secret);
    }

    // Générer le QR code
    $qr_code_url = my_google_authenticator_generate_qr_code_url(get_bloginfo('name') . ':' . $user->user_login, $google_authenticator_secret);

    ?>
    <h3><?php _e('Authentification à deux facteurs (Google Authenticator)', 'mon-google-authenticator'); ?></h3>

    <table class="form-table">
        <tr>
            <th><label for="google_authenticator_enabled"><?php _e('Activer l\'authentification à deux facteurs', 'mon-google-authenticator'); ?></label></th>
            <td>
                <input type="checkbox" name="google_authenticator_enabled" id="google_authenticator_enabled" value="1" <?php checked($google_authenticator_enabled, 1); ?>>
            </td>
        </tr>
        <tr>
            <th><label for="google_authenticator_qr_code"><?php _e('QR code', 'mon-google-authenticator'); ?></label></th>
            <td>
                <img src="<?php echo esc_url($qr_code_url); ?>" alt="<?php _e('QR code pour Google Authenticator', 'mon-google-authenticator'); ?>">
                <p class="description"><?php _e('Scannez ce QR code avec l\'application Google Authenticator pour configurer l\'authentification à deux facteurs.', 'mon-google-authenticator'); ?></p>
            </td>
        </tr>
    </table>
    <?php
}


function my_google_authenticator_save_profile_fields($user_id) {
    $is_2fa_enabled_before = get_user_meta($user_id, 'wp_secure_digits_enabled', true);

    if (isset($_POST['wp_secure_digits_enabled']) && $_POST['wp_secure_digits_enabled'] == 'on') {
        update_user_meta($user_id, 'wp_secure_digits_enabled', true);
    } else {
        delete_user_meta($user_id, 'wp_secure_digits_enabled');
    }

    $is_2fa_enabled_after = get_user_meta($user_id, 'wp_secure_digits_enabled', true);

    // Check if 2FA status has changed
    if ($is_2fa_enabled_before != $is_2fa_enabled_after) {
        if ($is_2fa_enabled_after) {
            my_google_authenticator_send_activation_email($user_id);
        } else {
            my_google_authenticator_send_deactivation_email($user_id);
        }
    }
}


add_action('show_user_profile', 'my_google_authenticator_profile_fields');
add_action('edit_user_profile', 'my_google_authenticator_profile_fields');
add_action('personal_options_update', 'my_google_authenticator_save_profile_fields');
add_action('edit_user_profile_update', 'my_google_authenticator_save_profile_fields');

function my_personal_options_update($user_id) {
    $wp_secure_digits_enabled = isset($_POST['wp_secure_digits_enabled']) ? true : false;
    update_user_meta($user_id, 'wp_secure_digits_enabled', $wp_secure_digits_enabled);
}

function show_google_authenticator_fields() {
    echo '<style>tr.google-authenticator-fields {display:table-row !important;}</style>';
}
add_action('admin_head', 'show_google_authenticator_fields');


/*  controles des codes  */

function my_google_authenticator_authenticate($user, $username, $password) {
    if (is_wp_error($user)) {
        return $user;
    }

    $google_authenticator_enabled = get_user_meta($user->ID, 'google_authenticator_enabled', true);

    if ($google_authenticator_enabled) {
        if (!isset($_POST['google_authenticator_code'])) {
            return new WP_Error('authentication_failed', __('L\'authentification à deux facteurs est requise.'));
        }

        $ga = new PHPGangsta_GoogleAuthenticator();
        $secret = get_user_meta($user->ID, 'google_authenticator_secret', true);
        $code = $_POST['google_authenticator_code'];

        if (!$ga->verifyCode($secret, $code)) {
            $backup_code = isset($_POST['backup_code']) ? $_POST['backup_code'] : '';
            if (!empty($backup_code)) {
                $backup_codes = get_user_meta($user->ID, 'my_google_authenticator_backup_codes', true);
                $is_valid_backup_code = false;
                
                foreach ($backup_codes as $index => $hashed_code) {
                    if (wp_check_password($backup_code, $hashed_code, $user->ID)) {
                        $is_valid_backup_code = true;
                        unset($backup_codes[$index]);
                        break;
                    }
                }

                if ($is_valid_backup_code) {
                    update_user_meta($user->ID, 'my_google_authenticator_backup_codes', array_values($backup_codes));
                    return $user;
                } else {
                    return new WP_Error('invalid_backup_code', __('Le code de secours saisi est incorrect.'));
                }
            }

            return new WP_Error('authentication_failed', __('Le code Google Authenticator entré est incorrect.'));
        }
    }

    return $user;
}


add_filter('authenticate', 'my_google_authenticator_authenticate', 20, 3);
add_action('wp_login', 'my_google_authenticator_login_hook', 10, 2);  // ?

/* INIT */

function my_google_authenticator_settings_init() {
    $option_group = 'my_google_authenticator_options';
    $option_name = 'my_google_authenticator_settings';

    // Enregistre les paramètres
    register_setting(
        $option_group,
        $option_name
    );

    // Ajoute une section pour les paramètres généraux
    $general_section_id = 'my_google_authenticator_general_section';
    add_settings_section(
        $general_section_id,
        __('Paramètres généraux', 'my-google-authenticator'),
        null,
        $option_group
    );

    // Ajoute les champs pour les paramètres généraux
       $general_section_id = 'my_google_authenticator_general_settings';

    add_settings_section(
        $general_section_id,
        __('Paramètres généraux', 'my-google-authenticator'),
        'my_google_authenticator_general_settings_section_callback',
        $option_group
    );

    add_settings_field(
        'my_google_authenticator_custom_logo',
        __('URL du logo personnalisé', 'my-google-authenticator'),
        'my_google_authenticator_custom_logo_render',
        $option_group,
        $general_section_id
    );


    add_settings_field(
        'my_google_authenticator_desktop_wallpaper_url',
        __('URL du fond d\'écran pour ordinateur de bureau', 'my-google-authenticator'),
        'my_google_authenticator_desktop_wallpaper_url_render',
        $option_group,
        $general_section_id
    );

    add_settings_field(
        'my_google_authenticator_mobile_wallpaper_url',
        __('URL du fond d\'écran pour mobile', 'my-google-authenticator'),
        'my_google_authenticator_mobile_wallpaper_url_render',
        $option_group,
        $general_section_id
    );

    add_settings_field(
        'my_google_authenticator_text_color',
        __('Couleur du texte', 'my-google-authenticator'),
        'my_google_authenticator_text_color_render',
        $option_group,
        $general_section_id
    );

    add_settings_field(
        'my_google_authenticator_transparency_level',
        __('Niveau de transparence', 'my-google-authenticator'),
        'my_google_authenticator_transparency_level_render',
        $option_group,
        $general_section_id
    );

    // Ajoute une section pour les options de personnalisation
    $customization_section_id = 'my_google_authenticator_customization_section';
    add_settings_section(
        $customization_section_id,
        __('Options de personnalisation', 'my-google-authenticator'),
        null,
        $option_group
    );

    // Ajoute les champs pour les options de personnalisation
    
	add_settings_field(
        'my_google_authenticator_custom_logo_url',
        __('URL du logo personnalisé', 'my-google-authenticator'),
        'my_google_authenticator_custom_logo_url_render',
        $option_group,
        $customization_section_id
    );

    add_settings_field(
        'my_google_authenticator_enable_disable_2FA',
        __('Autoriser la désactivation de la 2FA pour les groupes sélectionnés', 'my-google-authenticator'),
        'my_google_authenticator_enable_disable_2FA_render',
        $option_group,
        $customization_section_id
    );

    // Ajoute une section pour les options avancées
    $advanced_section_id = 'my_google_authenticator_advanced_section';
    add_settings_section(
        $advanced_section_id,
        __('Options avancées', 'my-google-authenticator'),
        null,
        $option_group
    );

    // Ajoute les champs pour les options avancées
     
	     add_settings_field(
        'my_google_authenticator_desktop_wallpaper_url',
        __('URL du fond d\'écran pour ordinateur de bureau', 'my-google-authenticator'),
        'my_google_authenticator_desktop_wallpaper_url_render',
        $option_group,
        $advanced_section_id
    );

    add_settings_field(
        'my_google_authenticator_mobile_wallpaper_url',
        __('URL du fond d\'écran pour mobile', 'my-google-authenticator'),
        'my_google_authenticator_mobile_wallpaper_url_render',
        $option_group,
        $advanced_section_id
    );

    add_settings_field(
        'my_google_authenticator_transparency_level',
        __('Niveau de transparence', 'my-google-authenticator'),
        'my_google_authenticator_transparency_level_render',
        $option_group,
        $advanced_section_id
    );

    add_settings_field(
        'my_google_authenticator_text_color',
        __('Couleur du texte', 'my-google-authenticator'),
        'my_google_authenticator_text_color_render',
        $option_group,
        $advanced_section_id
    );
	
	    // Champs pour les options d'autorisation de désactivation 2FA
    add_settings_field(
        'my_google_authenticator_allow_disable_2fa',
        __('Autoriser la désactivation de 2FA', 'my-google-authenticator'),
        'my_google_authenticator_allow_disable_2fa_render',
        $option_group,
        $permission_section_id
    );

    add_settings_field(
        'my_google_authenticator_user_groups',
        __('Groupes d\'utilisateurs concernés', 'my-google-authenticator'),
        'my_google_authenticator_user_groups_render',
        $option_group,
        $permission_section_id
    );

	add_settings_field(
		'wpsecuredigits_email_method', // ID du champ
		__('Méthode d\'envoi des e-mails', 'wpsecuredigits'), // Titre du champ
		'wpsecuredigits_email_method_render', // Fonction de rendu du champ
		'wpsecuredigits_pluginPage', // Page de réglages
		'wpsecuredigits_pluginPage_section' // Section de réglages
	);



	 $permission_section_id = 'my_google_authenticator_permission_section';

			add_settings_section(
				$permission_section_id,
				__('Permission', 'my-google-authenticator'),
				'my_google_authenticator_permission_section_callback',
				$option_group
			);

			// peuvent desactiver 2FA ou pas
			add_settings_field(
				'my_google_authenticator_allow_disable_2fa',
				__('Autoriser la désactivation de 2FA', 'my-google-authenticator'),
				'my_google_authenticator_allow_disable_2fa_render',
				$option_group,
				$permission_section_id
			);

			// groupes
			add_settings_field(
				'my_google_authenticator_user_groups',
				__('Groupes d\'utilisateurs concernés', 'my-google-authenticator'),
				'my_google_authenticator_user_groups_render',
				$option_group,
				$permission_section_id
			);
		
			// polices
			add_settings_field(
				'my_google_authenticator_font_family',
				__('Police de caractères', 'my-google-authenticator'),
				'my_google_authenticator_font_family_render',
				'my_google_authenticator',
				'my_google_authenticator_customization_section'
			);

			// Marge
			add_settings_field(
				'my_google_authenticator_margin',
				__('Marge', 'my-google-authenticator'),
				'my_google_authenticator_margin_render',
				'my_google_authenticator',
				'my_google_authenticator_customization_section'
			);

			// Espacement
			add_settings_field(
				'my_google_authenticator_spacing',
				__('Espacement', 'my-google-authenticator'),
				'my_google_authenticator_spacing_render',
				'my_google_authenticator',
				'my_google_authenticator_customization_section'
			);

		// couleur arriere plan
		add_settings_field(
			'my_google_authenticator_background_color',
			__('Background color', 'my-google-authenticator'),
			'my_google_authenticator_background_color_render',
			'my_google_authenticator_pluginPage',
			'my_google_authenticator_pluginPage_section'
		);

		// couleur textes
		add_settings_field(
			'my_google_authenticator_text_color',
			__('Text color', 'my-google-authenticator'),
			'my_google_authenticator_text_color_render',
			'my_google_authenticator_pluginPage',
			'my_google_authenticator_pluginPage_section'
		);

		// couleur bouton
		add_settings_field(
			'my_google_authenticator_button_color',
			__('Button color', 'my-google-authenticator'),
			'my_google_authenticator_button_color_render',
			'my_google_authenticator_pluginPage',
			'my_google_authenticator_pluginPage_section'
		);

		// fontes
		add_settings_field(
			'my_google_authenticator_font_family',
			__('Font Family', 'my-google-authenticator'),
			'my_google_authenticator_font_family_render',
			'my_google_authenticator_pluginPage',
			'my_google_authenticator_pluginPage_section'
		);

		// wallpaper desktop
		add_settings_field(
			'my_google_authenticator_desktop_wallpaper_url',
			__('Desktop wallpaper URL', 'my-google-authenticator'),
			'my_google_authenticator_desktop_wallpaper_url_render',
			'my_google_authenticator_pluginPage',
			'my_google_authenticator_pluginPage_section'
		);

		// wallpaper mobile
		add_settings_field(
			'my_google_authenticator_mobile_wallpaper_url',
			__('Mobile wallpaper URL', 'my-google-authenticator'),
			'my_google_authenticator_mobile_wallpaper_url_render',
			'my_google_authenticator_pluginPage',
			'my_google_authenticator_pluginPage_section'
		);

		// messages 
		add_settings_field(
		'my_google_authenticator_custom_message',
		__('Custom message', 'my-google-authenticator'),
		'my_google_authenticator_custom_message_render',
		'my_google_authenticator_pluginPage',
		'my_google_authenticator_pluginPage_section'
		);
	
		// limit connexion
		add_settings_field(
			'login_attempts_limit',
			__('Limite des tentatives de connexion', 'my-google-authenticator'),
			'my_google_authenticator_login_attempts_limit_render',
			'my_google_authenticator',
			'my_google_authenticator_general_section'
		);
		register_setting('my_google_authenticator', 'login_attempts_limit');
		
		// duree de blocage
		add_settings_field(
		'my_google_authenticator_lock_duration',
		__('Durée du verrouillage temporaire (en minutes)', 'my-google-authenticator'),
		'my_google_authenticator_lock_duration_render',
		'my_google_authenticator',
		'my_google_authenticator_security'
		);
		
		// Disable REST API option
		add_settings_field(
			'my_google_authenticator_disable_rest_api',
			__('Désactiver l\'API REST de WordPress', 'my-google-authenticator'),
			'my_google_authenticator_disable_rest_api_render',
			'my_google_authenticator_pluginPage',
			'my_google_authenticator_pluginPage_section'
		);

		// Daily email notification option
		add_settings_field(
			'my_google_authenticator_daily_email_notification',
			__('Activer les notifications par e-mail quotidiennes', 'my-google-authenticator'),
			'my_google_authenticator_daily_email_notification_render',
			'my_google_authenticator_pluginPage',
			'my_google_authenticator_pluginPage_section'
		);

		// Secure headers option
		add_settings_field(
			'my_google_authenticator_enable_secure_headers',
			__('Activer les en-têtes de sécurité', 'my-google-authenticator'),
			'my_google_authenticator_enable_secure_headers_render',
			'my_google_authenticator_pluginPage',
			'my_google_authenticator_pluginPage_section'
		);
				
		// blocage d'identifiants particuliers
		add_settings_field(
		'blocked_usernames', // ID
		__('Noms d\'utilisateur bloqués', 'my-google-authenticator'), // Titre
		'my_google_authenticator_blocked_usernames_render', // Fonction de rendu
		'my_google_authenticator_pluginPage', // Page
		'my_google_authenticator_pluginPage_section' // Section
		);

		// champ code de secours
		add_settings_field(
		'wpsecuredigits_reset_backup_codes',
		__('Réinitialiser les codes de secours', 'wpsecuredigits'),
		'wpsecuredigits_reset_backup_codes_callback',
		'wpsecuredigits',
		'wpsecuredigits_general_section'
		);

register_setting('my_google_authenticator', 'my_google_authenticator_lock_duration');

	 
	 
}

// Ajoute la page d'options du plugin au menu d'administration de WordPress
add_action('admin_menu', 'my_google_authenticator_add_settings_link');

/* liste d'identifiant à bloquer séparé par des virgules */
function my_google_authenticator_blocked_usernames_render() {
    $options = get_option('my_google_authenticator_settings');
    echo '<input type="text" name="my_google_authenticator_settings[blocked_usernames]" value="' . esc_attr($options['blocked_usernames']) . '" placeholder="admin,user2,user3" size="50">';
}

/* verifier si l'utilsateur est bloqué par son id */
function my_google_authenticator_check_blocked_usernames($user, $username, $password) {
    // Obtenez les options de réglage du plugin
    $options = get_option('my_google_authenticator_settings');

    // Vérifiez si les noms d'utilisateur bloqués sont définis
    if (!empty($options['blocked_usernames'])) {
        // Convertissez la chaîne en tableau
        $blocked_usernames = array_map('trim', explode(',', $options['blocked_usernames']));

        // Vérifiez si le nom d'utilisateur est dans la liste des noms d'utilisateur bloqués
        if (in_array($username, $blocked_usernames)) {
            return new WP_Error('blocked_username', __('<strong>ERREUR</strong> : Ce nom d\'utilisateur est bloqué.', 'my-google-authenticator'));
        }
    }

    return $user;
}

add_filter('authenticate', 'my_google_authenticator_check_blocked_usernames', 30, 3);



/* envoyer email quotidien */
function my_google_authenticator_send_daily_email() {
    $options = get_option('my_google_authenticator_settings');
    if (isset($options['my_google_authenticator_daily_email_notification']) && $options['my_google_authenticator_daily_email_notification']) {
        $admin_email = get_option('admin_email');
        $subject = __('Rapport quotidien de sécurité My Google Authenticator', 'my-google-authenticator');
        $message = "Voici le rapport quotidien de sécurité de votre site :\n\n"; // Contenu du message

        // Récupérez les statistiques et informations pertinentes
        $successful_logins = get_option('my_google_authenticator_successful_logins', 0);
        $failed_logins = get_option('my_google_authenticator_failed_logins', 0);
        $locked_accounts = get_option('my_google_authenticator_locked_accounts', array());
        $blocked_ips = get_option('my_google_authenticator_blocked_ips', array());
        
        // Construisez le contenu du message
        $message = "Voici le rapport quotidien de sécurité de votre site :\n\n";
        $message .= "Connexions réussies : {$successful_logins}\n";
        $message .= "Tentatives de connexion échouées : {$failed_logins}\n";
        $message .= "Comptes verrouillés : " . count($locked_accounts) . "\n";
        $message .= "Adresses IP bloquées : " . count($blocked_ips) . "\n";
        
        // Envoyez l'e-mail
        wp_mail($admin_email, $subject, $message);
    }
}

/* Cron pour envoyer les mails */
function my_google_authenticator_cron_schedules($schedules) {
    $schedules['daily'] = array(
        'interval' => 86400,
        'display' => __('Quotidien', 'my-google-authenticator')
    );
    return $schedules;
}
add_filter('cron_schedules', 'my_google_authenticator_cron_schedules');

/* Planification de l'envoi de mail a admin */
function my_google_authenticator_schedule_daily_email() {
    if (!wp_next_scheduled('my_google_authenticator_send_daily_email')) {
        wp_schedule_event(strtotime('tomorrow 6:00am'), 'daily', 'my_google_authenticator_send_daily_email');
    }
}
add_action('wp', 'my_google_authenticator_schedule_daily_email');
add_action('my_google_authenticator_send_daily_email', 'my_google_authenticator_send_daily_email');


/* fonction de desactivation api */
function my_google_authenticator_disable_rest_api_render() {
    $options = get_option('my_google_authenticator_settings');
    ?>
    <input type='checkbox' name='my_google_authenticator_settings[my_google_authenticator_disable_rest_api]' <?php checked(isset($options['my_google_authenticator_disable_rest_api']), 1); ?> value='1'>
    <?php
}

/* Fonction d'envoi de mail à l'administrateur */
function my_google_authenticator_daily_email_notification_render() {
    $options = get_option('my_google_authenticator_settings');
    ?>
    <input type='checkbox' name='my_google_authenticator_settings[my_google_authenticator_daily_email_notification]' <?php checked(isset($options['my_google_authenticator_daily_email_notification']), 1); ?> value='1'>
    <?php
}

/* fonction pour activer les secury headers */
function my_google_authenticator_enable_secure_headers_render() {
    $options = get_option('my_google_authenticator_settings');
    ?>
    <input type='checkbox' name='my_google_authenticator_settings[my_google_authenticator_enable_secure_headers]' <?php checked(isset($options['my_google_authenticator_enable_secure_headers']), 1); ?> value='1'>
    <?php
}

/* actions api/headers/mail */
$options = get_option('my_google_authenticator_settings');

// Disable REST API
if (isset($options['my_google_authenticator_disable_rest_api']) && $options['my_google_authenticator_disable_rest_api']) {
    add_filter('rest_authentication_errors', function ($result) {
        if (!is_user_logged_in()) {
            return new WP_Error('rest_not_logged_in', 'Vous n\'êtes pas autorisé à accéder à cette ressource.', array('status' => 401));
        }
        return $result;
    });
}

// Secure headers
if (isset($options['my_google_authenticator_enable_secure_headers']) && $options['my_google_authenticator_enable_secure_headers']) {
    add_action('send_headers', function () {
        header('X-Content-Type-Options: nosniff');
        header('X-XSS-Protection: 1; mode=block');
        header('X-Frame-Options: SAMEORIGIN');
        header('Strict-Transport-Security: max-age=31536000; includeSubDomains; preload');
    });
}


/* fonction pour le champ limite de connexion */
function my_google_authenticator_login_attempts_limit_render() {
    $options = get_option('login_attempts_limit');
    echo '<input type="number" name="login_attempts_limit" value="' . $options . '">';
}

/* suivre et limiter les tentatives de connexion */
function my_google_authenticator_failed_login($username) {
    global $wpdb;
    $ip_address = $_SERVER['REMOTE_ADDR'];
    $table_name = $wpdb->prefix . 'failed_logins';

    $wpdb->insert(
        $table_name,
        array(
            'ip_address' => $ip_address,
            'username' => $username,
            'attempt_time' => current_time('mysql'),
        )
    );
}
add_action('wp_login_failed', 'my_google_authenticator_failed_login');

/* verifier le nombre de tentatives de connexion */
function my_google_authenticator_limit_login_attempts($user, $password) {
    global $wpdb;
    $table_name = $wpdb->prefix . 'failed_logins';
    $ip_address = $_SERVER['REMOTE_ADDR'];

    // Check failed login attempts for the IP address
    $attempts = $wpdb->get_var($wpdb->prepare("SELECT COUNT(*) FROM $table_name WHERE ip_address = %s AND attempt_time > DATE_SUB(NOW(), INTERVAL 1 HOUR)", $ip_address));

    // Maximum allowed attempts
    $max_attempts = get_option('my_google_authenticator_max_attempts', 5);

    if ($attempts >= $max_attempts) {
        // Block the user
        $lock_duration = get_option('my_google_authenticator_lock_duration', 15); // In minutes
        $wpdb->insert($wpdb->prefix . 'account_locks', array(
            'user_id' => $user->ID,
            'lock_time' => current_time('mysql')
        ));

        return new WP_Error('too_many_attempts', sprintf(__('You have reached the maximum number of login attempts. Your account is temporarily locked for %d minutes.'), $lock_duration));
    }

    return $user;
}
add_filter('wp_authenticate_user', 'my_google_authenticator_limit_login_attempts', 30, 2);

/*  table dans la base de données pour stocker les informations de verrouillage */
function my_google_authenticator_plugin_activation() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'account_locks';

    $sql = "CREATE TABLE $table_name (
        id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
        user_id BIGINT(20) UNSIGNED NOT NULL,
        lock_time DATETIME NOT NULL,
        PRIMARY KEY (id),
        KEY user_id (user_id)
    );";

    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    dbDelta($sql);
}
register_activation_hook(__FILE__, 'my_google_authenticator_plugin_activation');



/* page de statistiques */
function my_google_authenticator_add_dashboard_page() {
    add_menu_page(
        'My Google Authenticator Dashboard',
        'My Google Authenticator',
        'manage_options',
        'my-google-authenticator-dashboard',
        'my_google_authenticator_dashboard_page',
        'dashicons-shield'
    );
}
add_action('admin_menu', 'my_google_authenticator_add_dashboard_page');

/* tableau de bord */
function my_google_authenticator_dashboard_page() {
    global $wpdb;

    $table_name = $wpdb->prefix . 'my_google_authenticator_stats';
    $failed_attempts = $wpdb->get_var("SELECT COUNT(*) FROM $table_name WHERE status = 'failed'");
    $successful_attempts = $wpdb->get_var("SELECT COUNT(*) FROM $table_name WHERE status = 'success'");
    $locked_accounts = $wpdb->get_var("SELECT COUNT(*) FROM $table_name WHERE status = 'locked'");
    $suspicious_ips = $wpdb->get_var("SELECT COUNT(DISTINCT ip) FROM $table_name WHERE status = 'failed'");

    echo '<div class="wrap">';
    echo '<h1>' . esc_html__('Statistiques de connexion', 'my-google-authenticator') . '</h1>';

    echo '<h2>' . esc_html__('Tentatives de connexion', 'my-google-authenticator') . '</h2>';
    echo '<p>' . sprintf(esc_html__('Échouées : %d', 'my-google-authenticator'), $failed_attempts) . '</p>';
    echo '<p>' . sprintf(esc_html__('Réussies : %d', 'my-google-authenticator'), $successful_attempts) . '</p>';

    echo '<h2>' . esc_html__('Sécurité', 'my-google-authenticator') . '</h2>';
    echo '<p>' . sprintf(esc_html__('Comptes verrouillés : %d', 'my-google-authenticator'), $locked_accounts) . '</p>';
    echo '<p>' . sprintf(esc_html__('Adresses IP suspectes : %d', 'my-google-authenticator'), $suspicious_ips) . '</p>';

    echo '</div>';
}

/* creer fiches poursuivre les connexions echouees */
function my_google_authenticator_create_failed_logins_table() {
    global $wpdb;
    $charset_collate = $wpdb->get_charset_collate();
    $table_name = $wpdb->prefix . 'failed_logins';

    $sql = "CREATE TABLE $table_name (
        id bigint(20) unsigned NOT NULL AUTO_INCREMENT,
        ip_address varchar(45) NOT NULL,
        username varchar(60) NOT NULL,
        attempt_time datetime NOT NULL,
        PRIMARY KEY (id)
    ) $charset_collate;";

    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    dbDelta($sql);
}
register_activation_hook(__FILE__, 'my_google_authenticator_create_failed_logins_table');


/* choix des polices */
function my_google_authenticator_font_family_render() {
    $options = get_option('my_google_authenticator_settings');
    $font_families = array('Arial', 'Verdana', 'Tahoma', 'Times New Roman', 'Courier New');
    echo '<select name="my_google_authenticator_settings[font_family]">';
    foreach ($font_families as $font_family) {
        echo '<option value="' . $font_family . '"' . selected($options['font_family'], $font_family, false) . '>' . $font_family . '</option>';
    }
    echo '</select>';
}
function my_google_authenticator_font_size_render() {
    $options = get_option('my_google_authenticator_settings');
    echo '<input type="number" name="my_google_authenticator_settings[font_size]" value="' . esc_attr($options['font_size']) . '" min="12" max="36" step="1">';
}

/* personnalisation marges et espacement */
function my_google_authenticator_margin_render() {
    $options = get_option('my_google_authenticator_settings');
    echo '<input type="number" name="my_google_authenticator_settings[margin]" value="' . esc_attr($options['margin']) . '" min="0" max="50" step="1">';
}

function my_google_authenticator_spacing_render() {
    $options = get_option('my_google_authenticator_options');
    $spacing = isset($options['spacing']) ? $options['spacing'] : '';
    ?>
    <input type="text" name="my_google_authenticator_options[spacing]" value="<?php echo esc_attr($spacing); ?>" />
    <p class="description"><?php _e('Définissez les espacements entre les éléments de la page de connexion. Par exemple: 10px 20px 30px 40px.', 'my-google-authenticator'); ?></p>
    <?php
}

/* Afficher la case à cocher "Autoriser la désactivation de 2FA" */
 function my_google_authenticator_allow_disable_2fa_render() {
    $options = get_option('my_google_authenticator_settings');
    ?>
    <input type='checkbox' name='my_google_authenticator_settings[allow_disable_2fa]' <?php checked($options['allow_disable_2fa'], 1); ?> value='1'>
    <?php
}
/* afficher les groupes d'utilisateurs dans un champ de sélection multiple */
function my_google_authenticator_user_groups_render() {
    $options = get_option('my_google_authenticator_settings');
    $user_roles = get_editable_roles();

    echo "<select name='my_google_authenticator_settings[user_groups][]' multiple='multiple' size='6'>";

    foreach ($user_roles as $key => $role) {
        $selected = in_array($key, (array)$options['user_groups']) ? 'selected' : '';
        echo "<option value='" . $key . "' " . $selected . ">" . $role['name'] . "</option>";
    }

    echo "</select>";
}

/* choix du type de message */
function wpsecuredigits_send_email($user_id) {
    // Récupérez les options du plugin
    $options = get_option('wpsecuredigits_settings');
    $email_method = $options['wpsecuredigits_email_method'];

    if ($email_method == 'standard') {
        // Envoyez le message standard
    } elseif ($email_method == 'custom_page') {
        // Créez et envoyez un e-mail avec les shortcodes
        // et les instructions pour accéder à la page personnalisée
    }
}



/* afficher une description pour la section "Permission" */
function my_google_authenticator_permission_section_callback() {
    echo __('Définir les permissions pour la désactivation de la 2FA et les groupes d\'utilisateurs concernés.', 'my-google-authenticator');
}

function my_google_authenticator_options_page() {
    // Enqueue the necessary CSS and JavaScript files
    wp_enqueue_style('my-google-authenticator-admin-css', plugins_url('admin/css/my-google-authenticator-admin.css', __FILE__));
    wp_enqueue_script('my-google-authenticator-admin-js', plugins_url('admin/js/my-google-authenticator-admin.js', __FILE__), array('jquery'));

    ?>
    <form action='options.php' method='post'>
        <h2>My Google Authenticator</h2>
        <?php
        settings_fields('my_google_authenticator_settings');
        do_settings_sections('my_google_authenticator_settings');
        submit_button();
        ?>
    </form>
    <?php
}

// shortcodes
function wpsecuredigits_send_qrcode_shortcode($atts) {
    $atts = shortcode_atts(array(
        'custom_message' => ''
    ), $atts, 'wpsecuredigits_send_qrcode');

    $user = wp_get_current_user();
    $qrcode_url = wpsecuredigits_generate_qrcode_url($user); // Générez l'URL du QR-code pour l'utilisateur

    if (!empty($atts['custom_message'])) {
        $message = $atts['custom_message'];
    } else {
        $message = __("Voici votre QR-code pour configurer l'authentification à deux facteurs :", 'wpsecuredigits');
    }

    $output = '<div class="wpsecuredigits-qrcode-message">';
    $output .= '<p>' . esc_html($message) . '</p>';
    $output .= '<img src="' . esc_url($qrcode_url) . '" alt="' . esc_attr__('QR-code', 'wpsecuredigits') . '">';
    $output .= '</div>';

    return $output;
}
// usage : echo do_shortcode('[wpsecuredigits_send_qrcode custom_message="Voici votre QR-code personnalisé :"]');

add_shortcode('wpsecuredigits_send_qrcode', 'wpsecuredigits_send_qrcode_shortcode');

// shortcode pour qr-code
function wpsecuredigits_qrcode_shortcode($atts) {
    // Vérifiez si l'utilisateur est connecté et a les autorisations nécessaires
    if (is_user_logged_in() && current_user_can('manage_options')) {
        // Générez le QR-code pour l'utilisateur connecté
        $qrcode = wpsecuredigits_generate_qrcode(get_current_user_id());
        return $qrcode;
    }
    return '';
}
add_shortcode('wpsecuredigits_qrcode', 'wpsecuredigits_qrcode_shortcode');

// shortcode pour code de securite
function wpsecuredigits_security_codes_shortcode($atts) {
    // Vérifiez si l'utilisateur est connecté et a les autorisations nécessaires
    if (is_user_logged_in() && current_user_can('manage_options')) {
        // Générez les codes de sécurité pour l'utilisateur connecté
        $security_codes = wpsecuredigits_generate_security_codes(get_current_user_id());
        return implode(', ', $security_codes);
    }
    return '';
}
add_shortcode('wpsecuredigits_security_codes', 'wpsecuredigits_security_codes_shortcode');

/* Fonction pour anonymiser les messages */
function display_error_message() {
    $custom_message = get_option('custom_error_message');
    if (!empty($custom_message)) {
        return $custom_message;
    } else {
        return __("Les informations fournies sont incorrectes ou le compte n'existe pas. Veuillez vérifier vos informations et réessayer.", "my-google-authenticator");
    }
}
// if ($password_incorrect){echo display_anonymous_error_message();} elseif ($account_not_found) { echo display_anonymous_error_message();}

/* MENUS */

// Ajouter le menu et la page des paramètres
function wpsecuredigits_add_settings_page() {
    add_options_page(
        __('WP Secured Digits', 'wpsecuredigits'),
        __('WP Secured Digits', 'wpsecuredigits'),
        'manage_options',
        'wpsecuredigits_settings',
        'wpsecuredigits_render_settings_page'
    );
}
add_action('admin_menu', 'wpsecuredigits_add_settings_page');

// Enregistre les paramètres
function wpsecuredigits_settings_init() {
    // Enregistre les paramètres
    register_setting('wpsecuredigits_settings_group', 'wpsecuredigits_options');

    // Ajoute les sections et les champs
    // Section 1: Paramètres généraux
    add_settings_section(
        'wpsecuredigits_general_settings_section',
        __('Paramètres généraux', 'wpsecuredigits'),
        'wpsecuredigits_general_settings_section_callback',
        'wpsecuredigits_settings'
    );

    // Ajoutez ici les champs pour les paramètres généraux

    // Section 2: Options de personnalisation
    add_settings_section(
        'wpsecuredigits_customization_settings_section',
        __('Options de personnalisation', 'wpsecuredigits'),
        'wpsecuredigits_customization_settings_section_callback',
        'wpsecuredigits_settings'
    );

    // Ajoutez ici les champs pour les options de personnalisation

    // Section 3: Options avancées
    add_settings_section(
        'wpsecuredigits_advanced_settings_section',
        __('Options avancées', 'wpsecuredigits'),
        'wpsecuredigits_advanced_settings_section_callback',
        'wpsecuredigits_settings'
    );

    // Ajoutez ici les champs pour les options avancées
}
add_action('admin_init', 'wpsecuredigits_settings_init');


// Fonction pour afficher la page des paramètres
 
/* PARTIE 2FA GOOGLE */

// generation secret pour un user
function wpsecuredigits_generate_secret($user_id) {
    $googleAuthenticator = new PHPGangsta_GoogleAuthenticator();
    $secret = $googleAuthenticator->createSecret();
    update_user_meta($user_id, 'wpsecuredigits_secret', $secret);
    return $secret;
}

// genere QR-code
function wpsecuredigits_generate_qr_code($user_id, $secret) {
    $googleAuthenticator = new PHPGangsta_GoogleAuthenticator();
    $user = get_userdata($user_id);
    $qrCodeUrl = $googleAuthenticator->getQRCodeGoogleUrl(
        $user->user_login,
        $secret,
        get_bloginfo('name')
    );
    return $qrCodeUrl;
}

// authentifier les utilisateurs

function wpsecuredigits_authenticate_user($user, $username, $password) {
  
    // (Code pour vérifier le nom d'utilisateur et le mot de passe) 
	// Vérifiez d'abord si les champs ne sont pas vides
    if (empty($username) || empty($password)) {
        return new WP_Error('empty_fields', __('Le nom d\'utilisateur et le mot de passe sont requis.', 'wpsecuredigits'));
    }

    // Vérifiez le nom d'utilisateur et le mot de passe
    $user = wp_authenticate_username_password(null, $username, $password);

    // Si une erreur est renvoyée, arrêtez le processus d'authentification
    if (is_wp_error($user)) {
        return $user;
    }

    $user_id = $user->ID;
    $secret = get_user_meta($user_id, 'wpsecuredigits_secret', true);
}

add_filter('authenticate', 'wpsecuredigits_authenticate_user', 30, 3);

/* codes de secours */

// generer les codes
function wpsecuredigits_generate_backup_codes($user_id) {
    $backup_codes = [];
    for ($i = 0; $i < 5; $i++) {
        $backup_codes[] = wp_generate_password(8, false, false);
    }

    update_user_meta($user_id, 'wpsecuredigits_backup_codes', $backup_codes);
}

// reintialiser les codes de secours
function wpsecuredigits_reset_backup_codes_callback() {
    $user_id = get_current_user_id();
    wpsecuredigits_generate_backup_codes($user_id);

    echo '<p>' . __('Les codes de secours ont été réinitialisés.', 'wpsecuredigits') . '</p>';
}

// fonction pour afficher les codes de secours à l'utilisateur
function wpsecuredigits_display_backup_codes() {
    $user_id = get_current_user_id();
    $backup_codes = get_user_meta($user_id, 'wpsecuredigits_backup_codes', true);
    
    if (empty($backup_codes)) {
        echo '<p>' . __('Aucun code de secours n\'a été généré pour votre compte.', 'wpsecuredigits') . '</p>';
        return;
    }
    
    echo '<h3>' . __('Vos codes de secours :', 'wpsecuredigits') . '</h3>';
    echo '<ul>';
    
    foreach ($backup_codes as $code) {
        echo '<li>' . esc_html($code) . '</li>';
    }
    
    echo '</ul>';
}

// shortcode pour afficher les codes de secours sur une page ou un article
function wpsecuredigits_backup_codes_shortcode($atts) {
    ob_start();
    wpsecuredigits_display_backup_codes();
    return ob_get_clean();
}

add_shortcode('wpsecuredigits_backup_codes', 'wpsecuredigits_backup_codes_shortcode');

// ajout zone vérification du code 
function wpsecuredigits_add_2fa_field() {
    echo '<p>';
    echo '<label for="wpsecuredigits_2fa_code">' . __('Code 2FA', 'wpsecuredigits') . '<br>';
    echo '<input type="text" name="wpsecuredigits_2fa_code" id="wpsecuredigits_2fa_code" class="input" value="" size="20"></label>';
    echo '</p>';
}

add_action('login_form', 'wpsecuredigits_add_2fa_field');


/* ---- Integration logo ----*/
function wpsecuredigits_login_logo() {
    $logo_url = get_option('wpsecuredigits_logo_url');
    
    if (empty($logo_url)) {
        return;
    }

    echo '<style type="text/css">
        #login h1 a, .login h1 a {
            background-image: url(' . esc_url($logo_url) . ');
            height: 100px;
            width: 300px;
            background-size: contain;
            background-repeat: no-repeat;
            padding-bottom: 30px;
        }
    </style>';
}

add_action('login_head', 'wpsecuredigits_login_logo');


/* --- MENU --- */
function wpsecuredigits_render_settings_page() {
    ?>
    <div class="wrap">
        <h1><?php echo esc_html(get_admin_page_title()); ?></h1>
        <form action="options.php" method="post">
            <?php
            settings_fields('wpsecuredigits_options');
            do_settings_sections('wpsecuredigits_settings');
            submit_button();
            ?>
        </form>
    </div>
    <?php
}

function wpsecuredigits_add_settings_link() {
    add_options_page(
        __('WP Secured Digits', 'wpsecuredigits'),
        __('WP Secured Digits', 'wpsecuredigits'),
        'manage_options',
        'wpsecuredigits_settings',
        'wpsecuredigits_render_settings_page'
    );
}

add_action('admin_menu', 'wpsecuredigits_add_settings_link');

